<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>freelf.me</title>
   
   <link></link>
   <description>Freelf's Blog</description>
   <language>en-uk</language>
   <managingEditor> Freelf</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>UIKit Dynamic Tutorial</title>
	  <link>//UIKit-Dynamic-Tutorial</link>
	  <author>Freelf</author>
	  <pubDate>2017-06-15T23:14:22+00:00</pubDate>
	  <guid>//UIKit-Dynamic-Tutorial</guid>
	  <description><![CDATA[
	     <p>这是一篇翻译自Raywenderlich上的文章，<a href="https://www.raywenderlich.com/50197/uikit-dynamics-tutorial">原文</a>。
<!-- more --></p>
<h2 id="whats-uikit-dynamic">What’s UIKit Dynamic</h2>
<p>  iOS7鼓励我们设计出一个物理动态的效果，这个听起来是一个很艰巨的任务。但是苹果爸爸已经为我们提供了一些非常好用的东西，就是UIKit Dynamics和Motion Effects。</p>
<ul>
  <li>UIKit Dynamics 是一个被整合的UIKit中的完整物理引擎。它允许你通过添加一些重力，附件(弹簧），力等行为来创建感觉真实的效果。你只管定义界面元素采用的物理特征，其他的就交给UIKit Dynamics。</li>
  <li>Motion Effects 就是你创建的一些行为，比如上面提到的那些重力，附件等等的东西。
当把这两个用在一起时，将会很自然的响应自己的行为。
    <h2 id="getting-started">Getting started</h2>
    <p>我们新建一个项目，然后在viewController里面加上下面的代码：</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIView* square = [[UIView alloc]initWithFrame:CGRectMake(100, 100, 100, 100)];
square.backgroundColor = [UIColor grayColor];
[self.view addSubview:square];

</code></pre></div></div>
<p>上面的代码仅仅是往view上面加了一个灰色的方形view。如下图：<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/1496933761.png" alt="" />。</p>
<h2 id="adding-gravity">Adding Gravity</h2>
<p>仍然在ViewController.m中，我们添加两个实例变量</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIDynamicAnimator* _animator;
UIGravityBehavior* _gravity;
</code></pre></div></div>
<p>然后在<code class="highlighter-rouge">viewDidLoad:</code>的最下面添加下面代码</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.view];
_gravity = [[UIGravityBehavior alloc] initWithItems:@[square]];
[_animator addBehavior:_gravity];
</code></pre></div></div>
<p>等下再解释这两行代码，编译运行程序，你会发现灰色方块缓慢的开始加速下落。
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/gravity.gif" alt="加重力" />
在代码中，仅仅添加了两个东西，一个是<code class="highlighter-rouge">UIDynamicAnimator</code>，一个是<code class="highlighter-rouge">UIGravityBehavior</code></p>
<ul>
  <li>==UIDynamicAnimator== 是一个UIKit的物理引擎，该类跟踪你添加到这个引擎的不同行为，例如，重力，并且提供整个上下文。当你创建一个<code class="highlighter-rouge">UIDynamicAnimator</code>实例时，你传入一个view，<code class="highlighter-rouge">UIDynamicAnimator</code>实例把你传入的view定义为他的坐标系。说了这么多，其实就是创建一个坐标系来执行动画。</li>
  <li>==UIGravityBehavior== 是一个重力行为的model，添加到相应的viwe上。他将影响和他关联的view。
很多的行为都有很多属性，用到的时候我们可以看他们响应的头文件，这里就不再赘述了。
    <h2 id="setting-boundaries">Setting boundaries</h2>
    <p>虽然我们可以看到这个方形的灰色view，他一直再下落，为了让他在屏幕定义的边界内。我们还要在添加一个behavior。
在<code class="highlighter-rouge">ViewController.m</code>中，添加一个变量：</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UICollisionBehavior* _collision;
</code></pre></div></div>
<p>然后在<code class="highlighter-rouge">viewDidLoad:</code>最下面添加下面代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_collision = [[UICollisionBehavior alloc]
                                      initWithItems:@[square]];
_collision.translatesReferenceBoundsIntoBoundary = YES;
[_animator addBehavior:_collision];
</code></pre></div></div>
<p>上面的代码创建了一个碰撞的行为，它为和他相关联的items定义了边界。但是不是明确的边界，我们需要将他的<code class="highlighter-rouge">_collision.translatesReferenceBoundsIntoBoundary</code>这个属性设置为YES，这样边界就是animator的referenceview的bounds（<code class="highlighter-rouge">setTranslatesReferenceBoundsIntoBoundaryWithInsets:</code>这样的方法来设定某一个区域作为碰撞边界，更复杂的边界可以使用addBoundaryWithIdentifier:forPath:来添加UIBezierPath，或者addBoundaryWithIdentifier:fromPoint:toPoint:来添加一条线段为边界，详细地还请查阅文档）。
运行代码，如下图：
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/collison.gif" alt="collision" /></p>

<h2 id="handling-collision">Handling collision</h2>
<p>下面你将要添加一个和方块view相互作用的栅栏。
在<code class="highlighter-rouge">viewDidLoad</code>中，在添加完方块view后面插入下面代码：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIView* barrier = [[UIView alloc] initWithFrame:CGRectMake(0, 300, 130, 20)];
barrier.backgroundColor = [UIColor redColor];
[self.view addSubview:barrier];
</code></pre></div></div>
<p>跑一下代码，如下图：
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/barrier.gif" alt="barrier" />
WTF，这不是我们想要的结果，但是它给我们提供了一个非常重要的信息：dynamics只作用于和行为相关联的view。关系如下图:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/1497453589.png" alt="" /></p>
<h2 id="making-objects-respond-to-collisions">Making objects respond to collisions</h2>
<p>为了让灰色方块和红色的栅栏碰撞，我们把初始化<code class="highlighter-rouge">_collision</code>的代码改成下面的这样：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_collision = [[UICollisionBehavior alloc] initWithItems:@[square, barrier]];
</code></pre></div></div>
<p>碰撞的对象需要知道交互的view，所以我们把barrier加入到数组中。运行一下会发现是下图这样的效果:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/collisonInteract.gif" alt="barrierInteract" />
碰撞的行为会为它相关联的item形成边界，所以你会看到这样的情况，更新一下前面关系图表变成下面这张图:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/1497531917.png" alt="update" />
然而，依然不是我们想要的结果，本来红色的栅栏应该是不动的，但是两个物体碰撞，栅栏被撞倒，开始向屏幕底部旋转。
更奇怪的是，栅栏从底部反弹，并不想方块那么沉稳。这是因为重力行为和栅栏无关，这也解释了为什么栅栏在碰撞之前不会下落。
看起来，需要另一个方法来解决问题。由于栅栏不能移动，所以动态引擎不需要知道它的存在。但是如何来检测碰撞呢？</p>
<h2 id="invisible-boundaries-and-collisions">Invisible boundaries and collisions</h2>
<p>还是把初始化<code class="highlighter-rouge">_collision</code>的函数改回原来那样。然后加入一个边界，代码如下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CGPoint rightEdge = CGPointMake(barrier.frame.origin.x +
                                barrier.frame.size.width, barrier.frame.origin.y);
[_collision addBoundaryWithIdentifier:@"barrier"
                            fromPoint:barrier.frame.origin
                              toPoint:rightEdge];
</code></pre></div></div>
<p>上面的代码添加了一个隐形的边界，这个边界就是红色栅栏的上方。
红色栅栏对于用户可见，但是对于动态引擎是不可见的。边界就恰恰相反了。随着灰色方块的下降，他似乎是和栅栏碰撞，实际上却是和边界碰撞，运行程序结果如下图:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/invisble.gif" alt="隐藏边界" />
方块现在从边界反弹，然后继续下落的屏幕底部。
到现在为止，UIKit Dynamics变得越来越清晰，只需要几行代码就可以完成相当多的功能。下面展示下动态引擎交互的细节。</p>
<h2 id="behind-the-scenes-of-collisions">Behind the scenes of collisions</h2>
<p>每一个动态行为都有一个<code class="highlighter-rouge">aciton</code>的属性，它是一个block，动画执行的每一步都会调用这个block，加入下面的代码:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_collision.action =  ^{
    NSLog(@"%@, %@", 
          NSStringFromCGAffineTransform(square.transform), 
          NSStringFromCGPoint(square.center));
};
</code></pre></div></div>
<p>上面的代码打印了方块的transform和center。运行下程序，将会看到下面的打印信息:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2017-06-15 21:27:53.525 UIDynamicPlayground[883:29136] [1, 0, 0, 1, 0, 0], {150, 150}
2017-06-15 21:27:53.534 UIDynamicPlayground[883:29136] [1, 0, 0, 1, 0, 0], {150, 150}
2017-06-15 21:27:53.550 UIDynamicPlayground[883:29136] [1, 0, 0, 1, 0, 0], {150, 151}
</code></pre></div></div>
<p>这里你可以看到动态引擎是改变view的center，相当于改变它的frame。
一旦方块和栅栏碰撞，会产生下面的信息:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2017-06-15 21:27:53.985 UIDynamicPlayground[883:29136] [0.99875026039496628, 0.049979169270678331, -0.049979169270678331, 0.99875026039496628, 0, 0], {152, 251}
2017-06-15 21:27:54.001 UIDynamicPlayground[883:29136] [0.99470018796194981, 0.10281797541510752, -0.10281797541510752, 0.99470018796194981, 0, 0], {153, 250}
</code></pre></div></div>
<p>在这里，可以看到动态引擎正在使用放射变换和frmae的改变来改变方块的位置。
虽然动态引擎对这些确切的值没什么兴趣，但是重要的是它们可以被使用。因此，如果在动态引擎正在运行的时候，我们不能改变这些属性。
动态行为的方法使用在那些遵守<code class="highlighter-rouge">UIDynamicItem</code>协议的对象上，协议如下:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">UIDynamicItem</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="n">CGPoint</span> <span class="n">center</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">CGRect</span> <span class="n">bounds</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="n">CGAffineTransform</span> <span class="n">transform</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">UIDynamicItem</code>协议提供了center和transform的读写权限，允许它基于动态内部计算移动item。Dynamics还具有对bounds的读权限，它用于确定item的大小，这样可以在item周边创建碰撞边界，还可以计算当item被施加力时的质量。
这个协议以为着Dynamics并不耦合于UIView。其实还有另外一个UIKit类遵守了这个协议–UICollectionViewLayoutAttributes。它允许Dynamics对collection view的item做动画。</p>
<h2 id="collision-notifications">Collision notifications</h2>
<p>前面你添加了一些view和behaviors，下一步你将看到如何接收item碰撞的信息。
我们让<code class="highlighter-rouge">ViewController.m</code>遵守<code class="highlighter-rouge">UICollisionBehaviorDelegate</code>协议。
然后把自己设置为<code class="highlighter-rouge">_collision</code>的代理。实现协议方法：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)collisionBehavior:(UICollisionBehavior *)behavior beganContactForItem:(id&lt;UIDynamicItem&gt;)item 
            withBoundaryIdentifier:(id&lt;NSCopying&gt;)identifier atPoint:(CGPoint)p {
    NSLog(@"Boundary contact occurred - %@", identifier);
}
</code></pre></div></div>
<p>代理函数将会在碰撞出现的时候执行，在控制台打印一些信息。
运行程序，方块和红色栅栏会交互，并且看到下面的打印:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2017-06-15 22:30:22.393 UIDynamicPlayground[1145:47436] Boundary contact occurred - barrier
2017-06-15 22:30:22.843 UIDynamicPlayground[1145:47436] Boundary contact occurred - barrier
2017-06-15 22:30:23.042 UIDynamicPlayground[1145:47436] Boundary contact occurred - barrier
2017-06-15 22:30:23.842 UIDynamicPlayground[1145:47436] Boundary contact occurred - (null)
2017-06-15 22:30:23.859 UIDynamicPlayground[1145:47436] Boundary contact occurred - (null)
2017-06-15 22:30:24.143 UIDynamicPlayground[1145:47436] Boundary contact occurred - (null)

</code></pre></div></div>
<p>从打印的信息来看，barrier就是我们添加的不可见的碰撞边界，null就是和reference view边界碰撞。
下面我们来添加一下碰撞时的指示，在代理打印代码下面加入下面的代码:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIView* view = (UIView*)item;
view.backgroundColor = [UIColor yellowColor];
[UIView animateWithDuration:0.3 animations:^{
    view.backgroundColor = [UIColor grayColor];
}];
</code></pre></div></div>
<p>上面的代码在碰撞时改变了方块的颜色为黄色，然后再让它渐变成灰色。运行程序效果如下图:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/inditor.gif" alt="碰撞指示" />
到目前为止，UIKit Dynamics通过根据你项目的边界来进行计算，自动设置item的物理属性(如质量或弹性).接下来，将会看到如何通过<code class="highlighter-rouge">UIDynamicItemBehavior</code>这个类来控制这些物理属性。</p>
<h2 id="configuring-item-properties">Configuring item properties</h2>
<p>在<code class="highlighter-rouge">viewDidLoad</code>中，在最下面添加下面的代码:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UIDynamicItemBehavior* itemBehaviour = [[UIDynamicItemBehavior alloc] initWithItems:@[square]];
itemBehaviour.elasticity = 0.6;
[_animator addBehavior:itemBehaviour];
</code></pre></div></div>
<p>上面的代码床架了一个item behavior，并且把它和方块相关联。然后把这个行为添加到animator中。elasticity属性控制item的柔软度；值为1.0表示完全弹性碰撞，也就是说，碰撞中没有动能损失，这里讲弹性设置为0.6，就意味着每次碰撞动能衰减0.6.
上面的代码只是改变了item的弹性，然而，behavior有很多属性可以在代码中操作，它们如下:</p>
<ul>
  <li>elasticity - 决定弹性的碰撞。</li>
  <li>friction - 摩擦，表示活动时的阻力。</li>
  <li>density - 密度，当和size组合时，将会给出一个总体的质量，质量越大，惯性越大。</li>
  <li>resistance - 阻力，决定任何线性运动的阻力，和摩擦的区别是，阻力仅仅作用于滑动。</li>
  <li>angularResistance - 决定旋转运动的阻力</li>
  <li>allowsRotation - 这是一个很有趣的属性，他不和任何物理属性映射，当它的值为NO时，对象不会旋转，不理会任何旋转的力。
    <h2 id="adding-behaviors-dynamically">Adding behaviors dynamically</h2>
    <p>下面我们来看下如何动态的添加和移除behaviors。
我们在<code class="highlighter-rouge">ViewController.m</code>中添加下面的实例变量:</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BOOL _firstContact;
</code></pre></div></div>
<p>在碰撞的代理方法最后面添加下面的代码:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (!_firstContact)
{
    _firstContact = YES;
    
    UIView* square = [[UIView alloc] initWithFrame:CGRectMake(30, 0, 100, 100)];
    square.backgroundColor = [UIColor grayColor];
    [self.view addSubview:square];
    
    [_collision addItem:square];
    [_gravity addItem:square];
    
    UIAttachmentBehavior* attach = [[UIAttachmentBehavior alloc] initWithItem:view
                                                               attachedToItem:square];
    [_animator addBehavior:attach];
}
</code></pre></div></div>
<p>上面的代码将会在第一次碰撞时创建另一个方块并且给方块添加重力和碰撞行为。另外，还设置了附件行为，创建了使用虚拟弹簧连接一对对象的效果。
运行程序，当方块集中栅栏的时候，将会看到新的方块，并且两个方块之间还想有东西连接着他们，但是并不会显示出来。效果如下图:
<img src="https://nightwish.oss-cn-beijing.aliyuncs.com/attachment.gif" alt="attachment" />。
当然我们除了使用SDK预先定义好的行为外，还可以自定义自己想要的行为。这种定义可以发生在两个层面上，一个是打包官方的行为，另一种完全定义新的计算规则。具体可以参见<a href="https://onevcat.com/2013/06/uikit-dynamics-started/">喵神的博客</a>。</p>

<h2 id="参考">参考</h2>
<ul>
  <li><a href="https://www.raywenderlich.com/50197/uikit-dynamics-tutorial">Understand UIKit Dynamics</a></li>
  <li><a href="https://onevcat.com/2013/06/uikit-dynamics-started/">喵神的wwdc总结</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>iOS9的适配</title>
	  <link>//iOS9%E7%9A%84%E9%80%82%E9%85%8D</link>
	  <author>Freelf</author>
	  <pubDate>2016-01-18T13:46:30+00:00</pubDate>
	  <guid>//iOS9%E7%9A%84%E9%80%82%E9%85%8D</guid>
	  <description><![CDATA[
	     <p>iOS9升级后相信很多人都是项目报错，因为项目要升级iOS9，从网上看了很多教程，就这篇教程还是比较全的，分享给大家，顺便自己记录下。网址是<a href="http://www.cocoachina.com/ios/20151016/13715.html">整理 iOS 9 适配中出现的坑（图文）</a>。</p>


	  ]]></description>
	</item>

	<item>
	  <title>iOS视图控制器的生命周期</title>
	  <link>//iOS%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</link>
	  <author>Freelf</author>
	  <pubDate>2015-10-14T14:20:25+00:00</pubDate>
	  <guid>//iOS%E8%A7%86%E5%9B%BE%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</guid>
	  <description><![CDATA[
	     <p>​        我们去面试很多时候都被问到视图控制器的声明周期，下面我们着重来讲解下视图控制器的声明周期。
<!-- more --></p>
<h2 id="了解重要的三个函数">了解重要的三个函数</h2>

<p>​ 视图控制器的声明周期我们讲解3个函数:1.loadView，2.viewDidLoad，3.viewDIdUnload。</p>

<p>​ 1.loadView是我们每次访问VC的view时而且view为nil时，loadView就会调用。loadVIew是用来创建VC的view的。默认的实现方式是下面这两个：</p>

<ul>
  <li>
    <p>先去查找与VC相关的xib文件，通过xib文件来创建VC的view。</p>

    <p>​   如果初始化VC时指定了xib文件，就会根据xib文件名来加载对应的xib文件，比如我们代码是这样写的</p>

    <pre><code class="language-objective-c">ViewController *view = [[ViewController alloc]initWithNibName:@"ViewController" bundle:nil];
</code></pre>

    <p>​   如果没有明显的传xib文件就加载和他同名的xib文件，代码是这样的：</p>

    <pre><code class="language-objective-c">ViewController *view = [[ViewController alloc]init];
</code></pre>

    <p>​   上面这两种方式都是指有xib文件。</p>
  </li>
  <li>
    <p>如果没有相关联的xib文件，就创建一个空白的view赋值给VC的view属性</p>

    <p>​   想要通过代码来创建view，就要重写loadVIew方法，并且不需要调用super的方法，我们既然要通过代码来创建UIView，那就没必要先创建一个空白的view，以节省不必要的开销，不需要调用[super loadView]。代码如下：</p>

    <pre><code class="language-objective-c">-(void)loadView{
    self.view = [[UIWebView alloc]init];
}
</code></pre>
  </li>
</ul>

<p>​ 2.无论通过代码还是xib，在view创建完成后肯定会调用viewDidLoad方法，一般会在这里做界面上的初始化操作，比如往view中添加一些subView，从数据库和网络加载数据显示到subView中。例如：</p>

<pre><code class="language-objective-c">- (void)viewDidLoad
 {
     [super viewDidLoad];
     
     // 添加一个按钮
     UIButton *button = [UIButton buttonWithType:UIButtonTypeContactAdd];
    [button addTarget:self action:@selector(click) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:button];
}
</code></pre>

<p>​ 3.iOS内存极其有限，如果应用程序占用内存过多的话，系统就会发出内存警告，VC就会受到didReceiveMemoryWarning消息，这个方法的默认实现是如果当前VC的view不在应用程序的视图层次结构中，即view的superView为nil时，就会将view释放并且调用viewdidUnload方法。这个方法有什么用，上面说到，发出内存警告且view被释放时就会调用viewdidUnload方法，所以释放资源主要与界面元素想的操作，将相关的实例赋值为nil。</p>

<pre><code class="language-objective-c">- (void)viewDidUnload {
     [super viewDidUnload];
     self.name = nil;
     self.pwd = nil;
 }
</code></pre>

<p>​ 当发出内存警告只是调用了viewDidUnload，只是释放了view，并没有释放VC，所以viewDidUnload和dealloc没有任何的联系，dealloc只是在释放VC时调用。</p>

<h2 id="三个函数的联系">三个函数的联系</h2>

<p>​ 1.对此访问VC的view是，view为nil，然后调用loadView创建view。</p>

<p>​ 2.view创建完毕后会调用viewdidLoad方法进行界面元素的初始化。</p>

<p>​ 3.当内存警告是，系统可能会释放VC的view，将view赋值为nil，并且调用viewDidUnload方法。</p>

<p>​ 4.当再次访问VC的view时，view已经在3中被赋值为nil，所以又会调用loadView方法重新创建view。</p>

<p>​ 5.view被重新创建完毕后，还是会调用viewDidLoad方法进行界面元素的初始化。</p>

<h2 id="vc的声明周期">VC的声明周期</h2>

<p>​ 1.我们通过下面两张图来说明，我们创建一个工程，然后在一个storyboard中拖一个按钮，然后点击按钮跳到下一个VC，看一下函数打印。</p>

<pre><code class="language-objective-c">-[ViewController initWithCoder:]
-[ViewController loadView]
-[ViewController viewDidLoad]
-[ViewController viewWillAppear:]
-[ViewController viewDidAppear:]
  
//present BViewController
-[BViewController init]
-[BViewController initWithNibName:bundle:]
-[BViewController loadView]
-[BViewController viewDidLoad]
-[ViewController viewWillDisappear:]
-[BViewController viewWillAppear:]
-[BViewController viewDidAppear:]
-[ViewController viewDidDisappear:]
</code></pre>

<p>声明周期如下：</p>

<ul>
  <li>xib/storyboard(指文件存在) ：initWithCoder 非xib\storyboard(需要手工创建)：先调init，init本身又会调initWithNibName:bundle:</li>
  <li>-loadView</li>
  <li>-viewDidLoad</li>
  <li>-viewWillAppear</li>
  <li>-viewDidAppear</li>
  <li>-viewWillDisappear</li>
  <li>-viewDidDisappear</li>
</ul>

<p>注意，从当前VC进入另一个VC的执行顺序</p>

<ul>
  <li>-[ViewController viewWillDisappear:]</li>
  <li>-[BViewController viewWillAppear:]</li>
  <li>-[BViewController viewDidAppear:]</li>
  <li>[ViewController viewDidDisappear:]</li>
</ul>

<p>在下一个VC完全出现后，才会调用前一个VC的完全消失，像需要不同控制器之间导航条隐藏与显示控制问题，就需要特别注意声明周期的顺序。</p>


	  ]]></description>
	</item>

	<item>
	  <title>iOS事件响应机制</title>
	  <link>//iOS%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6</link>
	  <author>Freelf</author>
	  <pubDate>2015-10-07T14:20:25+00:00</pubDate>
	  <guid>//iOS%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6</guid>
	  <description><![CDATA[
	     <p>​         本文着重讲解iOS事件的传递机制，如有错误或者有意见不同者，欢迎指出讨论。</p>

<p>​           iOS的事件有好几种：Touch Events(触摸事件)、Motion Events(运动事件，比如重力感应和摇一摇等)、Remote Event(远程事件，比如用耳机上的按键来控制手机)，其中我们最常用的就是触摸事件了，基于存在于APP的每个地方，我们就主要讲讲他。</p>

<p>​         我们从三个方面来介绍iOS的事件机制：1.响应链是什么时候构建的？2.事件的第一响应者怎么确定的，3.事件第一响应者确定后，系统是怎么传递事件的。
<!-- more -->
##响应链的构建</p>

<p>无论是哪种事件，其传递和响应都与响应链息息相关，那么响应链到底是一个什么样的东西呢？ 在UIKit中有一个类：UIResponder，我们可以看看头文件的几个属性和方法：</p>

<pre><code class="language-objective-c">NS_CLASS_AVAILABLE_IOS(2_0) @interface UIResponder : NSObject

- (nullable UIResponder*)nextResponder;

- (BOOL)canBecomeFirstResponder;    // default is NO
- (BOOL)becomeFirstResponder;

- (BOOL)canResignFirstResponder;    // default is YES
- (BOOL)resignFirstResponder;

- (BOOL)isFirstResponder;

// Generally, all responders which do custom touch handling should override all four of these methods.
// Your responder will receive either touchesEnded:withEvent: or touchesCancelled:withEvent: for each
// touch it is handling (those touches it received in touchesBegan:withEvent:).
// *** You must handle cancelled touches to ensure correct behavior in your application.  Failure to
// do so is very likely to lead to incorrect behavior or crashes.
- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesCancelled:(nullable NSSet&lt;UITouch *&gt; *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesEstimatedPropertiesUpdated:(NSSet * _Nonnull)touches NS_AVAILABLE_IOS(9_1);

</code></pre>

<p>UIResponder是所有可以响应事件的类的基类(从名字应该就可以看出来了)，其中包括最常见的UIView和UIViewController甚至是UIApplication，所以我们的UIView和UIViewController都是作为响应事件的载体。</p>

<p>​        事实事件响应链的形成和事件的响应和传递，UIResponder都帮我们做了很多事。我们的app中，所有的视图都是按照一定的结构组织起来的，即树状层次结构，每个view都有自己的superView，包括controller的topmost view(controller的self.view)。当一个view被add到superView上的时候，他的nextResponder属性就会被指向它的superView，当controller被初始化的时候，self.view(topmost view)的nextResponder会被指向所在的controller，而controller的nextResponder会被指向self.view的superView，这样，整个app就通过nextResponder串成了一条链，也就是我们所说的响应链。所以响应链就是一条虚拟的链，并没有一个对象来专门存储这样的一条链，而是通过UIResponder的属性串连起来的。下图是苹果官方文档给出的两种传递事件的app架构：</p>

<p><span><img src="\images\iOS事件响应机制\1.png" /></span></p>

<p>##Hit-test View</p>

<p>​         我们开头说道iOS有三种event类型，事件传递中UIWindow会根据不同的event，用不同的方式寻找initial object，initial object决定当前的事件类型。比如Touch Event，UIWindow会先试着把事件传递给事件发生的那个view，就是下面要说的hit-textview。对于Motion和Remote Event，UIWindow会把例如震动和远程控制事件传递给当前的firstResponder，有关firstResponder的信息请自己查看官方文档，下面我们主要说Touch Event的hit-textview。</p>

<p>​        有了事件响应链，接下来就是寻找事件的具体响应者了，我们称之为：Hit-Testing View，寻找这个View的过程我们称之为，hit-test。</p>

<p>​        什么是hit-test，我们可以理解为一个探测器，通过这个探测器，我们可以找到并且判断手指是否点击在某个视图上，就是通过Hit-test找到手指点击到的处于屏幕最前面的那个UIView。</p>

<p>​        在解释hit-test是什么工作之前，我们先看看它是什么时候被调用的。hit-test在代码中其实就是一个函数，UIView有下面两个方法：</p>

<pre><code class="language-objective-c">- (nullable UIView *)hitTest:(CGPoint)point withEvent:(nullable UIEvent *)event;
- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;  
</code></pre>

<p>​	每当手指接触屏幕，UIApplication接收到手机的事件后，就会去掉用UIWindow的<code class="highlighter-rouge">hitTest:withEvent:</code>，看看当前点击的点是否在window内，如果是则继续一次调用subView的<code class="highlighter-rouge">hitTest:withEvent:</code>方法，直到找到最后需要的view。调用结束并且hit-test view确定后，这个view和view上面依附的手势，都会和一个UITouch对象相关联起来，这个UITouch会作为事件的传递参数之一，我们可以看到UITouch头文件里面有一个view和gestureRecognizers的属性，这就是hit-test view和他的手势。</p>

<p>​	现在知道hit-test是什么时候调用了，那么接下来看看它是怎么工作的。Hit-Test是采用递归的方法从view层级的根节点开始遍历，看看下面这张图：</p>

<p><span><img src="\images\iOS事件响应机制\2.png" /></span></p>

<p>​	UIWindow有一个mainview，mainview里面有三个subview，他们的层级关系是，view A在最下面，view B在中间，view C在最上，也就是，view A是最先被加到superview上面的，view C最晚。其中view A和view B有一部分重叠。如果手指在view B.1和view A.2重叠的地方点击。按照上面递归的方式，顺序如下图所示：</p>

<p><span><img src="\images\iOS事件响应机制\3.png" /></span></p>

<p>​	递归是向界面的根节点UIWindow发送hitTest:withEvent:消息开始的，从这个消息返回的是一个UIView，也就是手指当前位置最前面的那个 hittest view。当向UIWindow发送hitTest:withEvent:消息时，hitTest:withEvent:里面所做的事，就是判断当前的点击位置是否在window里面，如果在则遍历window的subview然后依次对subview发送hitTest:withEvent:消息(注意这里给subview发送消息是根据当前subview的index顺序，index越大就越先被访问)。如果当前的point没有在view上，view的subview就不需要遍历了，当事件遍历到了view B.1，发现point在view B.1里面，并且view B.1没有subview，那么他就是我们要找的hittest view了，找到之后就会一路返回直到根节点，而view B之后的view A也不会被遍历了。下面这个图是网上找的，很是到位：</p>

<p><span><img src="\images\iOS事件响应机制\4.png" /></span></p>

<p>注意hitTest里面是有判断当前的view是否支持点击事件，比如userInteractionEnabled、hidden、alpha等属性，都会影响一个view是否可以相应事件，如果不响应则直接返回nil。 我们留意到还有一个pointInside:withEvent:方法，这个方法跟hittest:withEvent:一样都是UIView的一个方法，通过他开判断point是否在view的bounds范围内。如果这些条件都满足了，那么遍历就可以继续往下走了。代码大概如下：</p>

<pre><code class="language-objective-c">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{
    if (self.userInteractionEnabled || self.hidden || self.alpha &lt;= 0.01) {
        return nil;
    }
    if ([self pointInside:point withEvent:event]) {
        for (UIView *subView in [self.subviews reverseObjectEnumerator]) {
            CGPoint converPoint = [subView convertPoint:point fromView:self];
            UIView *hitTestView = [subView hitTest:converPoint withEvent:event];
            if (hitTestView) {
                return hitTestView;
            }
        }
        return self;
    }
    return nil;
}
</code></pre>

<p>##Hit-Test应用</p>

<p>1.扩大view的点击区域</p>

<p>​	一个按钮尺寸是10*10，如果要扩大按钮的点击区域，就是点击其四周之外的10pt也可以响应点击，可以怎么做呢，也许重写hitTest:withEvent:是个好办法，hittest就是返回可以响应事件的view，如果我们在button的子类就重写他，在里面判断如果point在button的frame之外的10pt，就返回button自己。</p>

<pre><code class="language-objective-c">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{
    if (self.userInteractionEnabled || self.hidden || self.alpha &lt;= 0.01) {
        return nil;
    }
    CGRect touchRect = CGRectInset(self.bounds, -10, -10);
    if (CGRectContainsPoint(touchRect, point)) {
        for (UIView *subView in [self.subviews reverseObjectEnumerator]) {
            CGPoint converPoint = [subView convertPoint:point fromView:self];
            UIView *hitTestView = [subView hitTest:converPoint withEvent:event];
            if (hitTestView) {
                return hitTestView;
            }
        }
        return self;
    }
    return nil;
}
</code></pre>

<p>2.将事件传递给兄弟view</p>

<p>​	如上面第一个图，如果需要是需要view A响应事件而不是B(即使点在重叠的部分)，什么都不做的话，当点击在重叠的时候，A是不能响应事件的，除非B的userInteractionEnabled为NO并且者B没有任何事件的响应函数。这个时候通过重写B的hittest可以解决这个问题，在B的hittest里面直接返回nil就行了。</p>

<pre><code class="language-objective-c">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{
    UIView *hitTestView = [super hitTest:point withEvent:event];
    if (hitTestView == self) {
        hitTestView = nil;
    }
    return hitTestView;
}
</code></pre>

<p>2.将事件传递给subView</p>

<p>​	如下图，蓝色的scrollView设置pagingEnabled使得image停止滚动后都会固定在居中的位置，如果在scrollView的左边或者右边活动发现scrollView是无法滚动的，原因就是hittest里面没有满足pointInSide这个条件，scrollView的bound只有蓝色的区域。这个时候重写UIView的hottest:withEvent:，然后返回scrollView即可解决问题。</p>

<p><span><img src="\images\iOS事件响应机制\5.png" /></span></p>

<pre><code class="language-objective-c">-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event{
    UIView *hitTestView = [super hitTest:point withEvent:event];
    if (hitTestView) {
        hitTestView = self.scrollView;
    }
    return hitTestView;
}
</code></pre>

<p>##事件的传递</p>

<p>​	有了响应链，并且找到了第一响应事件的对象，接下来就是把事件发送给这个响应者了。UIApplication中有个<code class="highlighter-rouge">sendEvent:</code>方法，在UIWindow中同样也有一个这个方法。UIApplication是通过这个方法把事件发送给UIWindow，然后UIWindow通过同样的接口把事件发个hit-test view的。这个我们可以从Time Profile里面得到证实：</p>

<p><span><img src="\images\iOS事件响应机制\6.png" /></span></p>

<p>​	当我点击了WRBuyBookButton之后，UIWindow会通过一个私有方法，在里面会去调用按钮的touchesBegan和touchesEnded方法，touchesBegan里面有设置按钮高亮等之类的动作，这就实现了事件的传递。而事件的响应，也就是按钮上绑定了action，是在touchesEnded里面通过调用UIApplication的sendAction:to:from:forEvent:方法来实现的，至于这个方法怎么去响应action，就只能猜测了，可能是通过OC的底层消息机制的相关接口objc-msgSend来发送消息实现的。如果第一响应者没有响应这个事件，那么就会根据响应链，把这个事件冒泡传递给nextResponder来响应。</p>

<p>​	注意这里是怎么把事件传递给nextResponder的呢？拿touch事件来说，UIResponder里面的touch四个阶段的方法里面，实际上什么事都没做，UIView继承了它进行重写，重写的内容也是没有什么东西，就是把事件传递给了nextResponder,比如：<code class="highlighter-rouge">[self.nextResponder touchesBegan:touches withEvent:event]</code>。所以当一个view或者controller里面没有重写touch事件，那么这个事件就一直传递下去，直到UIAplication，这也就是事件向上冒泡的原理。如果view重写了touch方法，我们一般会看到的效果就是这个view响应了事件之后，事件就会被截断了，他得nextResponder不会收到这个事件，即使重写了nextResponder的touch方法。这个时候如果想事件继续传递下去，可以调用<code class="highlighter-rouge">[super touchesBegan:touches withEvent:event]</code>,不建议直接调<code class="highlighter-rouge">[self.nextResponder touchesBegan:touches withEvent:event]</code>。</p>

<p>#关于UIScrollView的事件</p>

<p>​	先说一个现象，我们平时加到UIScrollView(或者UITableView和UICollectionView)上的UIButton，即使有设置highLight的样式，点击的时候却发现这个样式老是出不来，但是按钮的事件命名可以响应的，很诡异。</p>

<p>​	后来才知道，UIScrollView因为要滚动，所以对时间做了特殊的处理：当UIScrollView接收到事件后，会暂时劫持当前事件300ms，如果300ms之后手指还没有滚动欧冠，则认为你放弃滚动，放弃对事件的劫持并往下传递，但是从Time Profiler看到此时按钮并不是调用自身的touch方法，而是调用自身绑定手势的touch事件，由于按钮的highLighted样式是写在按钮的touch方法上的，所以这个时候就看不到高亮了，但是长按按钮可以有高亮的状态，这个就不太清楚为什么了，因为从Time Profiler里面看到按钮的touchesBegan好像没有被调。如果300ms之内手指滚动了，则相应滚动事件，事件就不会传给subView了，也就是不会继续调用按钮上手势的touch方法了。</p>

<p><span><img src="\images\iOS事件响应机制\7.png" /></span></p>

<p>​	可以通过UIScrollView的一个属性来解决这个问题：<code class="highlighter-rouge">delaysContentTouches</code>，意思是 是否需要延迟处理事件的传递，默认为NO，我们把它设为YES后，一切看起来挺好的，按钮终于有了高亮样式了，但是发现手指点击在按钮上并滚动，发现ScrollView滚动不了了。原来是当手指点击UIScrollView并在滚动之前，如果subView接收并且可以相应事件，那么事件响应链就会在subView相应事件后就截断了，即UIScrollView本身不会响应这个事件，不会发生滚动了。可以设置<code class="highlighter-rouge">canCancelContentTouches</code>为YES来让UIScrollView可以滚动，与之类似的还有一个<code class="highlighter-rouge">touchesShouldCancelInContentView:</code>接口，可以根据参数view来更判断是否需要cancel，如果需要可以在UIScrollView的子类重写这个接口。</p>

<p>​	这一块里面的具体实现原理就不知道了。我们也没必要深究，大方向理解就好了，真的有兴趣的也可以去研究下，期待研究完的同学分享。</p>


	  ]]></description>
	</item>


</channel>
</rss>
