<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>freelf.me</title>
   
   <link></link>
   <description>Freelf's Blog</description>
   <language>en-uk</language>
   <managingEditor> Freelf</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Metal基础概念——利用GPU高效计算</title>
	  <link>//Metal%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E5%88%A9%E7%94%A8GPU%E9%AB%98%E6%95%88%E8%AE%A1%E7%AE%97</link>
	  <author>Freelf</author>
	  <pubDate>2019-08-02T00:00:00+00:00</pubDate>
	  <guid>//Metal%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E5%88%A9%E7%94%A8GPU%E9%AB%98%E6%95%88%E8%AE%A1%E7%AE%97</guid>
	  <description><![CDATA[
	     <p>Metal是Apple提供的一个可以让我们开发者直接和GPU对话的API。Metal在图像处理，并行计算方面通过发挥GPU的特性，极大提升了性能。</p>

<p>由于本人最近在一个画板需求中使用了Metal，做项目的时候由于Deadline的原因，当时并没有有系统学习。现在项目上线，回头系统学习一下Metal，顺便入门一下图像处理。本文主要是介绍一些Metal的基础概念，通过一系列项目来了解Metal。</p>
<h2 id="在gpu中进行计算">在GPU中进行计算</h2>
<p>通过这个例子，我们会介绍一些在所有Metal应用中都会用到的一些概念：</p>
<ol>
  <li>编写可以在GPU中执行的函数</li>
  <li>找到一个GPU</li>
  <li>通过创建管道让第一步创建的函数可以在GPU上执行</li>
  <li>创建GPU可以访问的内存保存数据</li>
  <li>创建command buffer并且编码GPU指令来操作数据</li>
  <li>提交command buffer到command queue来让GPU执行编码的指令</li>
</ol>

<p>既然是想利用GPU进行一些操作，我们通过下图来看一下如何使用GPU进行操作：
<img src="http://nightwish.oss-cn-beijing.aliyuncs.com/2019-08-02-041818.png" alt="" />
我们只需要组装command，然后提交到GPU就可以得到我们想要的结果。</p>

<h3 id="编写在gpu中执行的函数">编写在GPU中执行的函数</h3>
<p>通过下面两个函数，我们来看一下在GPU中计算和在CPU中进行计算的区别，我们先来看一下在CPU中把两个数组中的数相加然后把结果写到第三个数组的计算过程：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">add_arrays</span><span class="p">(</span><span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">inA</span><span class="p">,</span>
                <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">inB</span><span class="p">,</span>
                <span class="kt">float</span><span class="o">*</span> <span class="n">result</span><span class="p">,</span>
                <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">inA</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="n">inB</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>接下来我们看一下如何使用GPU实现相同的功能，在GPU中执行的函数我们统称为着色器函数(至于为什么叫着色器函数是有历史原因的，因为在GPU执行的函数大多是用来处理图像的像素的，所以叫做着色器函数)：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kernel</span> <span class="kt">void</span> <span class="nf">add_arrays</span><span class="p">(</span><span class="n">device</span> <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">inA</span><span class="p">,</span>
                       <span class="n">device</span> <span class="k">const</span> <span class="kt">float</span><span class="o">*</span> <span class="n">inB</span><span class="p">,</span>
                       <span class="n">device</span> <span class="kt">float</span><span class="o">*</span> <span class="n">result</span><span class="p">,</span>
                       <span class="n">uint</span> <span class="n">index</span> <span class="p">[[</span><span class="n">thread_position_in_grid</span><span class="p">]])</span>
<span class="p">{</span>
    <span class="c1">// the for-loop is replaced with a collection of threads, each of which
</span>    <span class="c1">// calls this function.
</span>    <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">inA</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="n">inB</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>先不要管上面函数中<code class="highlighter-rouge">kernel</code>、<code class="highlighter-rouge">[[thread_position_in_grid]]</code>这些代码是什么意思(这些是Metal Shader Language的固定语法，不属于本文的讨论)，只看计算过程。通过对比，我们可以发现在GPU中，我们可以并行的对每个元素进行计算，而在CPU中，我们需要遍历数组进行计算。这就是GPU强大的运算能力。我们知道，CPU擅长进行逻辑控制，串行的运算，而GPU擅长大规模的并发计算，比如上面这种简单的运算。而图像处理本身就需要大量的简单运算，所以非常适合GPU，所以一般图像处理的任务都会交给GPU去做。</p>

<h3 id="找到一个gpu对象">找到一个GPU对象</h3>
<p>有了上面的函数，我们如何让这个函数在GPU中执行呢？
首先，我们需要拿到一个GPU。在iOS中，我们可以通过Metal的<code class="highlighter-rouge">MTLCreateSystemDefaultDevice()</code>这个函数去拿到一个GPU的抽象对象<code class="highlighter-rouge">MTLDevice</code>。GPU对象的创建非常耗时，我们平常使用时最好使用一个单例去持有它，然后进行复用。</p>

<h3 id="创建管道让函数在gpu中执行">创建管道让函数在GPU中执行</h3>
<p>通过上面简单的函数，我们获取到GPU的抽象对象。接下来需要配置一下我们前面写的运算函数，来让函数可以在GPU中进行执行。
当我们编译Metal应用时，Xcode会把着色器函数编译到默认的Metal library中。我们可以使用<code class="highlighter-rouge">MTLLibrary</code>和<code class="highlighter-rouge">MTLFunction</code>分别获取Metal library和着色器函数的信息。我们可以通过<code class="highlighter-rouge">MTLDevice</code>创建<code class="highlighter-rouge">MTLLibrary</code>，然后通过<code class="highlighter-rouge">MTLLibrary</code>来获取着色器函数:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_mDevice</span> <span class="o">=</span> <span class="n">device</span><span class="p">;</span>
        
<span class="n">NSError</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="n">nil</span><span class="p">;</span>
<span class="c1">// Load the shader files with a .metal file extension in the project
</span>
<span class="n">id</span><span class="o">&lt;</span><span class="n">MTLLibrary</span><span class="o">&gt;</span> <span class="n">defaultLibrary</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newDefaultLibrary</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">defaultLibrary</span> <span class="o">==</span> <span class="n">nil</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">"Failed to find the default library."</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">nil</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">id</span><span class="o">&lt;</span><span class="n">MTLFunction</span><span class="o">&gt;</span> <span class="n">addFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaultLibrary</span> <span class="n">newFunctionWithName</span><span class="o">:</span><span class="err">@</span><span class="s">"add_arrays"</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">addFunction</span> <span class="o">==</span> <span class="n">nil</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="err">@</span><span class="s">"Failed to find the adder function."</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">nil</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>取到着色器函数，接下来我们创建管道来配置函数，因为这里我们想使用GPU进行运算，所以，我们创建一个计算类型的管道，除了计算类型的管道还有渲染类型的管道，也就是我们经常听说的渲染管道。由于这里我们只想计算一下，所以这里我们创建一个计算类型的管道<code class="highlighter-rouge">MTLComputePipelineState</code>:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_mAddFunctionPSO</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newComputePipelineStateWithFunction</span><span class="o">:</span> <span class="n">addFunction</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</code></pre></div></div>

<h3 id="创建command-queue">创建command queue</h3>
<p>为了把任务提交到GPU，我们需要一个command queue，对应前面图中粉色的轨道。Metal使用命令队列来安排命令。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_mCommandQueue</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newCommandQueue</span><span class="p">];</span>
</code></pre></div></div>

<h3 id="创建数据">创建数据</h3>
<p>因为这里我们要计算两个数组元素相加对应的和，所以这里我们需要三个数组，两个相加的数组和一个存放结果的数组。GPU可以拥有自己的内存，也可以和操作系统共享内存。Metal使用<code class="highlighter-rouge">MTLResource</code>来管理内存。一个Resource表示在执行command时GPU可以访问的内存。使用<code class="highlighter-rouge">MTLDeveice</code>为它所代表的GPU创建resource。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_mBufferA</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newBufferWithLength</span><span class="o">:</span><span class="n">bufferSize</span> <span class="n">options</span><span class="o">:</span><span class="n">MTLResourceStorageModeShared</span><span class="p">];</span>
<span class="n">_mBufferB</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newBufferWithLength</span><span class="o">:</span><span class="n">bufferSize</span> <span class="n">options</span><span class="o">:</span><span class="n">MTLResourceStorageModeShared</span><span class="p">];</span>
<span class="n">_mBufferResult</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mDevice</span> <span class="n">newBufferWithLength</span><span class="o">:</span><span class="n">bufferSize</span> <span class="n">options</span><span class="o">:</span><span class="n">MTLResourceStorageModeShared</span><span class="p">];</span>

</code></pre></div></div>
<p>在这个例子中的resource是一个<code class="highlighter-rouge">MTLBuffer</code>对象，它继承自<code class="highlighter-rouge">MTLResource</code>，<code class="highlighter-rouge">MTLBuffer</code>分配的时候没有进行预先格式化。我们可以在使用的时候指定这块内存的格式。我们在分配的时候指定了一个option，<code class="highlighter-rouge">MTLResourceStorageModeShared</code>，这个option表示GPU和CPU都可以访问这块内存。为了计算两个数组相加的结果，我们需要填充<code class="highlighter-rouge">_mBufferA</code>和<code class="highlighter-rouge">_mBufferB</code>：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">generateRandomFloatData</span><span class="o">:</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MTLBuffer</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">buffer</span>
<span class="p">{</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">dataPtr</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">arrayLength</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">dataPtr</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">RAND_MAX</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="创建command-buffer">创建command buffer</h3>
<p>接下来我们通过command queue创建command buffer：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">id</span><span class="o">&lt;</span><span class="n">MTLCommandBuffer</span><span class="o">&gt;</span> <span class="n">commandBuffer</span> <span class="o">=</span> <span class="p">[</span><span class="n">_mCommandQueue</span> <span class="n">commandBuffer</span><span class="p">];</span>
</code></pre></div></div>

<h3 id="创建command-encoder">创建command encoder</h3>
<p>为了把command写到command buffer中，我们使用command encoder来编码具体类型的command。这个例子中，我们创建一个计算类型的command encoder，这个encoder编码计算过程。我们调用encoder的一些方法设置一些状态信息，比如设置管道和传入管道的参数。Encoder会把所有的状态改变和command参数写入到command buffer中。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">id</span><span class="o">&lt;</span><span class="n">MTLComputeCommandEncoder</span><span class="o">&gt;</span> <span class="n">computeEncoder</span> <span class="o">=</span> <span class="p">[</span><span class="n">commandBuffer</span> <span class="n">computeCommandEncoder</span><span class="p">];</span>
<span class="p">[</span><span class="n">computeEncoder</span> <span class="n">setComputePipelineState</span><span class="o">:</span><span class="n">_mAddFunctionPSO</span><span class="p">];</span>
<span class="p">[</span><span class="n">computeEncoder</span> <span class="n">setBuffer</span><span class="o">:</span><span class="n">_mBufferA</span> <span class="n">offset</span><span class="o">:</span><span class="mi">0</span> <span class="n">atIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">];</span>
<span class="p">[</span><span class="n">computeEncoder</span> <span class="n">setBuffer</span><span class="o">:</span><span class="n">_mBufferB</span> <span class="n">offset</span><span class="o">:</span><span class="mi">0</span> <span class="n">atIndex</span><span class="o">:</span><span class="mi">1</span><span class="p">];</span>
<span class="p">[</span><span class="n">computeEncoder</span> <span class="n">setBuffer</span><span class="o">:</span><span class="n">_mBufferResult</span> <span class="n">offset</span><span class="o">:</span><span class="mi">0</span> <span class="n">atIndex</span><span class="o">:</span><span class="mi">2</span><span class="p">];</span>
</code></pre></div></div>
<p><img src="http://nightwish.oss-cn-beijing.aliyuncs.com/2019-08-02-41819.png" alt="" />
每一个计算command都会让GPU创建一组线程去执行计算，这里我们需要设置GPU分配的线程数，关于如何计算这个数字，不属于本文讨论范围，想要了解详细的计算可以看<a href="https://developer.apple.com/documentation/metal/calculating_threadgroup_and_grid_sizes?language=objc"> Calculating Threadgroup and Grid Sizes </a>这篇文章。在这里我们先简单设置一下：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MTLSize</span> <span class="n">gridSize</span> <span class="o">=</span> <span class="n">MTLSizeMake</span><span class="p">(</span><span class="n">arrayLength</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">NSUInteger</span> <span class="n">threadGroupSize</span> <span class="o">=</span> <span class="n">_mAddFunctionPSO</span><span class="p">.</span><span class="n">maxTotalThreadsPerThreadgroup</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">threadGroupSize</span> <span class="o">&gt;</span> <span class="n">arrayLength</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">threadGroupSize</span> <span class="o">=</span> <span class="n">arrayLength</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">MTLSize</span> <span class="n">threadgroupSize</span> <span class="o">=</span> <span class="n">MTLSizeMake</span><span class="p">(</span><span class="n">threadGroupSize</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">[</span><span class="n">computeEncoder</span> <span class="n">dispatchThreads</span><span class="o">:</span><span class="n">gridSize</span>
          <span class="n">threadsPerThreadgroup</span><span class="o">:</span><span class="n">threadgroupSize</span><span class="p">];</span>
</code></pre></div></div>
<p>描述完整个计算过程后，我们可以调用<code class="highlighter-rouge">[computeEncoder endEncoding];</code>这个方法关闭计算过程。</p>

<h3 id="提交command-buffer执行命令">提交command buffer执行命令</h3>
<p>我们可以通过调用<code class="highlighter-rouge">[commandBuffer commit];</code>这个方法，提交command buffer中的命令。我们提交后，Metal会异步的准备将要执行的命令，然后安排GPU执行命令。当GPU执行完command buffer中的所有命令后，Metal会标记这个command buffer执行完成。</p>

<p>我们的应用可以在GPU执行命令时做一些其他的工作，在这个例子中，我们不需要做其他工作，所以在这里我们等待GPU执行完整个command buffer：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">commandBuffer</span> <span class="n">waitUntilCompleted</span><span class="p">];</span>
</code></pre></div></div>
<p>Metal也支持通知的方式来通知应用，我们可以通过command buffer 的<code class="highlighter-rouge">addCompletedHandler:</code>方法添加一个handler，或者监听command buffer的<code class="highlighter-rouge">status</code>属性来在GPU执行命令时做其他工作</p>

<h3 id="读取结果并验证正确定">读取结果并验证正确定</h3>
<p>当command buffer被执行后，GPU的计算结果存放在输出的buffer中。在一个真实的应用中，我们会从buffer中读取结果，并使用这个结果做一些事情，比如：在屏幕上显示结果或着把结果写入到文件中。
在我们这个例子中，我们仅仅读取一下结果验证一下在GPU中计算是否和在CPU中计算的是否一致。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">verifyResults</span>
<span class="p">{</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">_mBufferA</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="n">_mBufferB</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="n">_mBufferResult</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">arrayLength</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">index</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>
<p>通过这个例子，我们可以看到，通过编码命令的方式，可以让GPU执行一些任务。在这个例子中，我们仅仅让GPU执行了一些运算任务。让GPU执行一些其他的任务和计算任务大同小异，都是这些过程：</p>
<ol>
  <li>先要找到GPU对象</li>
  <li>编写任务函数</li>
  <li>通过编码任务把数据丢给GPU</li>
  <li>提交任务。</li>
</ol>

<p>我们可以利用GPU执行很多任务，但是一定要发挥GPU强大的运算能力。比如图像处理就是让GPU对每个像素执行一些算法，然后变换出一些滤镜效果。一定不要把CPU擅长的任务交给GPU去做，这就南辕北辙了。接下来我们将介绍一下GPU最重要的能力——渲染。</p>

<p>本文实例代码：<a href="https://docs-assets.developer.apple.com/published/5483f37f98/PerformingCalculationsOnAGPU.zip">代码</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
