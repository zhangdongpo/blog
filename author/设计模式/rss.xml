<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>freelf.me</title>
   
   <link></link>
   <description>Freelf's Blog</description>
   <language>en-uk</language>
   <managingEditor> Freelf</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>工厂模式</title>
	  <link>//%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F</link>
	  <author>Freelf</author>
	  <pubDate>2019-07-29T11:16:52+00:00</pubDate>
	  <guid>//%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F</guid>
	  <description><![CDATA[
	     <p>最近重新学习设计模式，以前一直看的是Raywenderlich的书籍，总感觉不够深入。最近重新找了一本书来学习，所以以前的系列就不再继续写了，重新开始记录。这是第一篇，来学习一下工厂模式。
设计模式名字中带工厂的有三个。简单工厂，工厂方法，抽象工厂。本文就看一下这三种工厂的区别，以及从简单工厂到抽象工厂的演进。</p>
<h2 id="简单工厂">简单工厂</h2>
<p>严格来讲简单工厂并不是一个标准的设计模式，但是它太常用了，所以需要我们好好掌握它。
在讲简单工厂前，我们先来讲一下接口(在iOS中叫做协议)。以前看任何有关设计的书时，总是会提到面向接口编程这个概念。那么接口是什么呢？接口有什么用？如何使用接口呢？下面我们先来搞明白这些问题再去学习简单工厂。
那么接口是什么呢？总的来说接口就是对一组实现的抽象，描述一个实现对象应有的一些功能。
至于接口有什么用呢？根据接口的定义，我们可以看出来，接口就是来定义实现的外观。用来约束实现类的行为，接口相当于一份契约，根据外部应用需要的功能，约定了实现类要实现的功能。但是具体的实现类除了实现接口定义的功能也可以实现一些其他的功能。
那么如何使用接口呢？接口的作用和用途浓缩下来就一句话，<strong>封装隔离</strong>。以前通常提到的封装是对数据的封装。我们这里的封装指的是对实现对象的行为和职责的封装。隔离是指外部调用和内部实现，外部调用只能通过接口调用，外部调用是不知道内部实现的，也就是说外部调用和内部实现是被接口隔离开的。
使用接口的好处就是只要接口不变，内部的实现无论如何变化，外部调用都不会改变。从而使得系统更加灵活，具有更好的可扩展性和可维护性。所以设计的书中一直强调面向接口编程。</p>
<h3 id="场景问题">场景问题</h3>
<p>接口的概念回忆完了，我们来看一下平常我们是如何使用接口的。假设有一个接口名字叫做<code class="highlighter-rouge">Api</code>,然后有一个实现类<code class="highlighter-rouge">Imp</code>实现了它，在客户端如何使用这个接口呢？通常情况下我们都会在客户端创建一个<code class="highlighter-rouge">Imp</code>对象，然后把它赋值给一个<code class="highlighter-rouge">Api</code>接口类型的变量。我们用代码来表示一下，因为我自己是一个iOS开发，所以代码使用Objective-C来体现：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Api
</span><span class="k">@protocol</span> <span class="nc">Api</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// Imp
</span><span class="k">@interface</span> <span class="nc">Imp</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Imp</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"doSomething"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="c1">// 使用接口
</span><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
	<span class="n">id</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span> <span class="n">api</span> <span class="o">=</span> <span class="p">[</span><span class="n">Imp</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">api</span> <span class="nf">doSomething</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>上面代码有什么问题呢？我们发现在使用接口的时候，我们既知道了<code class="highlighter-rouge">Api</code>又知道了<code class="highlighter-rouge">Imp</code>。接口的作用不是为了隔离外部调用和内部实现么，这里并没有隔离。为了隔离调用和实现，我们可以使用简单工厂来解决。</p>
<h3 id="简单工厂的使用">简单工厂的使用</h3>
<blockquote>
  <p>提供一个创建对象实例的功能，而无需关心其具体实现。</p>
</blockquote>

<p>我们可以通过提供一个创建对象实例的类给客户端，让客户端通过这个类来获取实例。减少了客户端和具体实现的依赖。下面我们通过代码来看一下通过简单工厂是如何解决问题的：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Api
</span><span class="k">@protocol</span> <span class="nc">Api</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// ImpA
</span><span class="k">@interface</span> <span class="nc">ImpA</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ImpA</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"ImpA doSomething"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="c1">// ImpB
</span><span class="k">@interface</span> <span class="nc">ImpB</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ImpB</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">doSomething</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"ImpB doSomething"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="c1">// Factory
</span><span class="k">@interface</span> <span class="nc">Factory</span> <span class="p">:</span> <span class="nc">NSObject</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Factory</span>

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">createImpWithCondition</span><span class="p">:(</span><span class="n">Int</span><span class="p">)</span><span class="nv">condition</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">condition</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">ImpA</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">condition</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">ImpB</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 使用接口
</span><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
	<span class="n">id</span><span class="o">&lt;</span><span class="n">Api</span><span class="o">&gt;</span> <span class="n">api</span> <span class="o">=</span> <span class="p">[</span><span class="n">Facotry</span> <span class="nf">createImpWithCondition</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
	<span class="p">[</span><span class="n">api</span> <span class="nf">doSomething</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="存在的问题">存在的问题</h3>
<p>如果在上述例子中，我们再添加一种实现，需要改动<code class="highlighter-rouge">Factory</code>的实现。每次添加一个新的实现都需要去修改工厂类，这显然不是一个好的实现方式。那么该怎么办呢。我们可以利用反射去实现，这里我们需要一个配置文件，Objective-C中最简单的配置文件就是plist，我们可以创建一个plist去配置实现类，然后再创建实现时去读plist中的配置，利用<code class="highlighter-rouge">NSClassFormString</code>方法获取<code class="highlighter-rouge">Class</code>，然后创建具体的实现类。以后添加新的实现时，我们只需要修改plist文件即可。</p>
<h3 id="思考简单工厂">思考简单工厂</h3>
<p>简单工厂的本质就是<em>选择实现</em>，重点在于选择，实现是提前写好的，就算是再简单的实现也要在实现类里面实现，不能在工厂类里面实现。简单工厂的目的在于为客户端选择实现，从而使客户端和实现解耦，如果具体实现发生了变化就不用变动客户端了，变化会被简单工厂吸收和屏蔽掉。可以看到简单工厂主要就是为了减少依赖，具体逻辑由具体类负责。</p>
<h2 id="工厂方法">工厂方法</h2>
<p>考虑这样一个实际应用，我们要实现一个导出数据的应用框架，让客户端选择数据的导出方式，然后导出数据。导出数据可能是文本格式，可能是数据库格式，也可能是PDF格式。</p>
<h3 id="场景问题-1">场景问题</h3>
<p>分析上面的实现，不管用户选择什么样的导出方式，最后导出的都是一个文件，因此应该有一个接口来描述导出文件对象的功能。我们把这个接口名叫做<code class="highlighter-rouge">ExportFileApi</code>，对于实现导出数据业务的功能对象，我们把它叫做<code class="highlighter-rouge">ExportOperate</code>。他应该根据需要来创建对应的<code class="highlighter-rouge">ExportFileApi</code>实现对象，但是<code class="highlighter-rouge">ExportOperate</code>并不知道应该创建哪一个<code class="highlighter-rouge">ExportFileApi</code>，也不知道如何创建<code class="highlighter-rouge">ExportFileApi</code>，因为<code class="highlighter-rouge">ExportOperate</code>只知道<code class="highlighter-rouge">ExportFileApi</code>这个接口，并不知道具体实现对象。</p>
<h3 id="使用工厂方法解决问题">使用工厂方法解决问题</h3>
<blockquote>
  <p>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。</p>
</blockquote>

<p>下面我们看一下使用具体代码如何解决上面这个问题的。我们先定义一下<code class="highlighter-rouge">ExportFileApi</code>这个接口：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@protocol</span> <span class="nc">ExportFileApi</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="cm">/**
 导出数据到文件

 @param data 被导出的数据
 @return 是否导出成功
 */</span>
<span class="o">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">exportFileWithData</span><span class="o">:</span><span class="p">(</span><span class="n">NSData</span><span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div></div>
<p>我们先提供导出两种文件，分别是文本格式和数据库格式：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 导出为文本的实现类
</span><span class="k">@interface</span> <span class="nc">ExportTxt</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ExportTxt</span>

<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"导出为文本"</span><span class="p">);</span>
	<span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">//导出为DB的实现类
</span><span class="k">@interface</span> <span class="nc">ExportDB</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">ExportDB</span>
<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"导出为DB"</span><span class="p">);</span>
	<span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>具体导出数据业务的功能对象<code class="highlighter-rouge">ExportOperate</code>示例代码如下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">ExportOperate</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span><span class="p">;</span>
<span class="cm">/**
 创建导出文件的具体实现

 @return 导出文件的具体实现
 */</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">factoryMethod</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ExportOperate</span>

<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
	<span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span> <span class="n">api</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">factoryMethod</span><span class="p">];</span>
	<span class="k">return</span> <span class="p">[</span><span class="n">api</span> <span class="nf">exportFileWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">factoryMethod</span> <span class="p">{</span>
	<span class="p">[</span><span class="n">NSException</span> <span class="nf">exceptionWithName</span><span class="p">:</span><span class="s">@"抽象方法不能直接调用"</span> <span class="nf">reason</span><span class="p">:</span><span class="s">@"必须子类重写"</span> <span class="n">userInfo</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
	<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>
<p>下面我们加入两个导出操作，一个是导出文本文档的操作，一个是导出数据库的操作。</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 导出文本文档的操作
</span><span class="k">@interface</span> <span class="nc">ExportTxtOperate</span> <span class="p">:</span> <span class="nc">ExportOperate</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">ExportTxtOperate</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">factoryMethod</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[</span><span class="n">ExportTxt</span> <span class="nf">new</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>
<span class="c1">// 导出DB的操作
</span><span class="k">@interface</span> <span class="nc">ExportDBOperate</span> <span class="p">:</span> <span class="nc">ExportOperate</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">ExportDBOperate</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">factoryMethod</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[</span><span class="n">ExportDB</span> <span class="nf">new</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>
<p>客户端代码示例代码：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ExportOperate</span> <span class="o">*</span><span class="n">dbOperate</span> <span class="o">=</span> <span class="p">[</span><span class="n">ExportDBOperate</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>还可以修改客户端new的对象，切换成其他的实现对象。此时如果增加新的导出类型的话，只需要继承<code class="highlighter-rouge">ExportOperate</code>再次重写工厂方法就好了。也可以参数化工厂方法，在父类里面提供默认实现。这里简单写一下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">ExportOperate</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">dataType</span><span class="p">:(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">type</span><span class="p">;</span>
<span class="cm">/**
 创建导出文件的具体实现

 @return 导出文件的具体实现
 */</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">factoryMethodWithType</span><span class="p">:(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">type</span><span class="p">;</span>
<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">ExportOperate</span>

<span class="k">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="nf">exportFileWithData</span><span class="p">:(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">dataType</span><span class="p">:(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span> <span class="n">api</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nf">factoryMethodWithType</span><span class="p">:</span><span class="n">type</span><span class="p">];</span>
	<span class="k">return</span> <span class="p">[</span><span class="n">api</span> <span class="nf">exportFileWithData</span><span class="p">:</span><span class="n">data</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">factoryMethodWithType</span><span class="p">:(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">ExportTxt</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">ExportDB</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>
<p>客户端代码：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ExportOperate</span> <span class="o">*</span><span class="n">dbOperate</span> <span class="o">=</span> <span class="p">[</span><span class="n">ExportOperate</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]</span> <span class="nf">dataType</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]</span> <span class="nf">dataType</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>如果这时增加导出PDF的操作，只需要继承<code class="highlighter-rouge">ExportOperate</code>就可以：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">ExportPDFOperate</span> <span class="p">:</span> <span class="nc">ExportOperate</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">ExportPDFOperate</span>

<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">ExportFileApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">factoryMethodWithType</span><span class="p">:(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">ExportPDF</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	   <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nf">factoryMethodWithType</span><span class="p">:</span><span class="n">type</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>
<p>客户端代码不用变化：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ExportOperate</span> <span class="o">*</span><span class="n">dbOperate</span> <span class="o">=</span> <span class="p">[</span><span class="n">ExportOperate</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]</span> <span class="nf">dataType</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]</span> <span class="nf">dataType</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
	<span class="p">[</span><span class="n">dbOperate</span> <span class="nf">exportFileWithData</span><span class="p">:[</span><span class="n">NSData</span> <span class="nf">data</span><span class="p">]</span> <span class="nf">dataType</span><span class="p">:</span><span class="mi">3</span><span class="p">];</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="思考工厂方法">思考工厂方法</h3>
<p>工厂方法的本质是<em>延迟到子类来选择实现</em>，它和简单工厂非常类似，都是选择实现，但是也存在不同点。简单工厂是在工厂里面直接选择实现，而工厂方法会把这个工作延迟到子类去实现，工厂类里面使用工厂方法的地方是依赖于具体实现的接口，这样使代码更加灵活，具有更好的可扩展性和可维护性。如果把工厂类退化一下，只提供工厂方法，而且工厂方法提供默认实现，就变成简单工厂了。可以认为简单工厂就是工厂方法的一种特例，因为它们本质是类似的，都是选择实现。</p>
<h2 id="抽象工厂">抽象工厂</h2>
<p>考虑一个生活中常见的例子——组装电脑，我们组装电脑时经常需要选择一些配件。其中主要的配件包括CPU，主板，内存等。为了简单点，我们只考虑CPU和主板。我们都知道CPU和主板需要配置好，不然会有不兼容的问题。对于装机工程师而言，他只知道要组装一台电脑，需要响应的配件，但是具体使用什么样的配件，需要客户说了算。现在我们来实现一下这个程序。</p>
<h3 id="场景问题-2">场景问题</h3>
<p>对于装机工程师而言，只要知道CPU和主板的接口，不知道具体实现，很明显可以用上简单工厂和工厂模式，为了简单，我们这里选择简单工厂。客户告诉装机工程师自己的选择，然后装机工程师会通过相应的工厂去获取相应的实例对象。示例代码如下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CPU接口
</span><span class="k">@protocol</span> <span class="nc">CPUApi</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">calculate</span><span class="p">;</span>

<span class="k">@end</span>

<span class="c1">// 主板接口
</span><span class="k">@protocol</span> <span class="nc">MainBoardApi</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">installCPU</span><span class="p">;</span>

<span class="k">@end</span>

<span class="c1">// Intel的CPU实现
</span><span class="k">@interface</span> <span class="nc">IntelCPU</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">initWithPins</span><span class="o">:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">pins</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">IntelCPU</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">pins</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">IntelCPU</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPins</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">pins</span> <span class="p">{</span>
	<span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">pins</span> <span class="o">=</span> <span class="n">pins</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">calculate</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"IntelCPU pins = %zd"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">pins</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// AMD的CPU实现
</span><span class="k">@interface</span> <span class="nc">AMDCPU</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">initWithPins</span><span class="o">:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">pins</span><span class="p">;</span>
<span class="k">@end</span>
<span class="k">@interface</span> <span class="nc">AMDCPU</span> <span class="p">()</span>

<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">pins</span><span class="p">;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">AMDCPU</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithPins</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">pins</span> <span class="p">{</span>
	<span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">pins</span> <span class="o">=</span> <span class="n">pins</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">calculate</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"AMDCPU pins = %zd"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">pins</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 技嘉主板实现
</span><span class="k">@interface</span> <span class="nc">GAMainBoard</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">initWithCpuHoles</span><span class="o">:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">holes</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">GAMainBoard</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">cpuHoles</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">GAMainBoard</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithCpuHoles</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">holes</span> <span class="p">{</span>
	<span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">cpuHoles</span> <span class="o">=</span> <span class="n">holes</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">installCPU</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"GAMainBoard cpuHoles = %zd"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cpuHoles</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 微星主板实现
</span><span class="k">@interface</span> <span class="nc">MSIMainBoard</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="n">initWithCpuHoles</span><span class="o">:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">holes</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">MSIMainBoard</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">cpuHoles</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MSIMainBoard</span>
<span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithCpuHoles</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">holes</span> <span class="p">{</span>
	<span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nf">init</span><span class="p">];</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">self</span><span class="p">.</span><span class="n">cpuHoles</span> <span class="o">=</span> <span class="n">holes</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">installCPU</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"MSIMainBoard cpuHoles = %zd"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cpuHoles</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// CPU工厂实现
</span><span class="k">@interface</span> <span class="nc">CPUFactory</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">+</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">createCpuWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">CPUFactory</span>
<span class="k">+</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">createCpuWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">IntelCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">1156</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">AMDCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">939</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 主板工厂实现
</span><span class="k">@interface</span> <span class="nc">MainBoardFactory</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">+</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">createMainBoardWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MainBoardFactory</span>
<span class="k">+</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">createMainBoardWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">GAMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">1156</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">MSIMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">939</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 装机工程师的实现
</span><span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithCpuType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">cpuType</span> <span class="nf">mainBoardType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">mainBoardType</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span> <span class="n">cpu</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span> <span class="n">mainBoard</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ComputerEngineer</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithCpuType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">cpuType</span> <span class="nf">mainBoardType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">mainBoardType</span> <span class="p">{</span>
	<span class="c1">// 准备硬件
</span>	<span class="p">[</span><span class="n">self</span> <span class="nf">prepareHardwaresWithCpuType</span><span class="p">:</span><span class="n">cpuType</span> <span class="nf">mainBoardType</span><span class="p">:</span><span class="n">mainBoardType</span><span class="p">];</span>
	<span class="c1">// 组装机器
</span>	<span class="c1">// 测试机器
</span><span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareHardwaresWithCpuType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">cpuType</span> <span class="nf">mainBoardType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">mainBoardType</span> <span class="p">{</span>
	<span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="p">[</span><span class="n">CPUFactory</span> <span class="nf">createCpuWithType</span><span class="p">:</span><span class="n">cpuType</span><span class="p">];</span>
	<span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="o">=</span> <span class="p">[</span><span class="n">MainBoardFactory</span> <span class="nf">createMainBoardWithType</span><span class="p">:</span><span class="n">mainBoardType</span><span class="p">];</span>
	
	<span class="c1">// 测试是否好用
</span>	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="nf">calculate</span><span class="p">];</span>
	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="nf">installCPU</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 测试
</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ComputerEngineer</span> <span class="o">*</span><span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="n">ComputerEngineer</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">engineer</span> <span class="nf">makeComputerWithCpuType</span><span class="p">:</span><span class="mi">1</span> <span class="nf">mainBoardType</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>

<span class="c1">// 运行结果如下
</span><span class="n">IntelCPU</span> <span class="n">pins</span> <span class="o">=</span> <span class="mi">1156</span>
<span class="n">GAMainBoard</span> <span class="n">cpuHoles</span> <span class="o">=</span> <span class="mi">1156</span>
</code></pre></div></div>
<p>看了上面的实现，会感觉很简单。但是有一个问题，就是CPU和主板对象必须兼容，比容上面例子中我们传入CPU的类型是1，主板类型是2，就会出现不匹配的情况。</p>
<h3 id="抽象工厂的使用">抽象工厂的使用</h3>
<p>我们可以使用抽象工厂来解决上面的问题。</p>
<blockquote>
  <p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
</blockquote>

<p>分析上面的问题，其实用两个问题点，一个是只知道所需要的一系列对象的接口，而不知道具体实现；另外一个是这一系列对象是相关或者相互依赖的。也就是说既要创建接口的对象，还要约束他们之间的关系。工厂方法和简单工厂关注的是单个产品对象的创建，抽象工厂专注的是一系列产品的创建。
下面我们使用抽象工厂来优化上面的例子：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 抽象工厂
</span><span class="k">@protocol</span> <span class="nc">AbstractFactory</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createCpu</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createMainboard</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// 具体工厂1
</span><span class="k">@interface</span> <span class="nc">SchemaOne</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">SchemaOne</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createCpu</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[[</span><span class="n">IntelCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">1136</span><span class="p">];</span>
<span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createMainboard</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[[</span><span class="n">GAMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">1136</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 具体工厂2
</span><span class="k">@interface</span> <span class="nc">SchemaTwo</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">SchemaTwo</span>
<span class="k">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createCpu</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[[</span><span class="n">AMDCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">939</span><span class="p">];</span>
<span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)</span><span class="n">createMainboard</span> <span class="p">{</span>
	<span class="k">return</span> <span class="p">[[</span><span class="n">MSIMainBoard</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">939</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 装机工程师的实现
</span><span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span> <span class="n">cpu</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span> <span class="n">mainBoard</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ComputerEngineer</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	<span class="c1">// 准备硬件
</span>	<span class="p">[</span><span class="n">self</span> <span class="nf">prepareHardwaresWithSchema</span><span class="p">:</span><span class="n">schema</span><span class="p">];</span>
	<span class="c1">// 组装机器
</span>	<span class="c1">// 测试机器
</span><span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareHardwaresWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	<span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="p">[</span><span class="n">schema</span> <span class="nf">createCpu</span><span class="p">];</span>
	<span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="o">=</span> <span class="p">[</span><span class="n">schema</span> <span class="nf">createMainboard</span><span class="p">];</span>
	
	<span class="c1">// 测试是否好用
</span>	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="nf">calculate</span><span class="p">];</span>
	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="nf">installCPU</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 测试
</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ComputerEngineer</span> <span class="o">*</span><span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="n">ComputerEngineer</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">engineer</span> <span class="nf">makeComputerWithSchema</span><span class="p">:[</span><span class="n">SchemaTwo</span> <span class="nf">new</span><span class="p">]];</span>
<span class="p">}</span>

</code></pre></div></div>
<h3 id="定义可扩展的工厂">定义可扩展的工厂</h3>
<p>抽象工厂为每一种它能创建的产品对象定义了相应的方法，如果在产品簇中要新加一种产品，比如现在我们要加一个内存，那就需要在抽象工厂中添加创建内存的一个方法。当抽象工厂一发生变化，所有的具体工厂实现都要发成变化。
现在有一种相对灵活，但不太安全的改进方式可以解决问题：抽象工厂里面不需要定义那么多方法，定义一个方法，给这个方法设置一个参数，通过这个参数来判断具体创建什么产品对象。由于只有一个方法，在返回类型上就不能是具体某个产品类型了，只能是所有的产品对象都继承或者实现的这么一个类型，在Objective-C里面干脆就使用NSObject类型。示例代码如下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 抽象工厂的接口
</span><span class="k">@protocol</span> <span class="nc">AbstractFactory</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="n">createProductWithType</span><span class="o">:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">type</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// 具体工厂1
</span><span class="k">@interface</span> <span class="nc">SchemaOne</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">SchemaOne</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">createProductWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">IntelCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">GAMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 具体工厂2
</span><span class="k">@interface</span> <span class="nc">SchemaTwo</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">SchemaTwo</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">createProductWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">AMDCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">MSIMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 装机工程师的实现
</span><span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span> <span class="n">cpu</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span> <span class="n">mainBoard</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ComputerEngineer</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	<span class="c1">// 准备硬件
</span>	<span class="p">[</span><span class="n">self</span> <span class="nf">prepareHardwaresWithSchema</span><span class="p">:</span><span class="n">schema</span><span class="p">];</span>
	<span class="c1">// 组装机器
</span>	<span class="c1">// 测试机器
</span><span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareHardwaresWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	<span class="c1">// 这里需要强转类型，不安全
</span>	<span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">schema</span> <span class="nf">createProductWithType</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
	<span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="o">=</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">schema</span> <span class="nf">createProductWithType</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
	
	<span class="c1">// 测试是否好用
</span>	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="nf">calculate</span><span class="p">];</span>
	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="nf">installCPU</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 测试
</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ComputerEngineer</span> <span class="o">*</span><span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="n">ComputerEngineer</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">[</span><span class="n">engineer</span> <span class="nf">makeComputerWithSchema</span><span class="p">:[</span><span class="n">SchemaTwo</span> <span class="nf">new</span><span class="p">]];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>上面强转类型，如果返回的不是CPU，强制转换成CPU就会发生错误，不安全。下面体验一下这种方式的灵活性，比如我们加内存，我们可以提供一个新的SchemaThree来使用它：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 定义内存接口
</span><span class="k">@protocol</span> <span class="nc">MemoryApi</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cacheData</span><span class="p">;</span>
<span class="k">@end</span>

<span class="c1">// 内存具体实现
</span><span class="k">@interface</span> <span class="nc">HyMemory</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">MemoryApi</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">HyMemory</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">cacheData</span> <span class="p">{</span>
	<span class="n">NSLog</span><span class="p">(</span><span class="s">@"内存充足"</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 包含创建内存的具体工厂
</span><span class="k">@interface</span> <span class="nc">SchemaThree</span> <span class="p">:</span> <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span>

<span class="k">@end</span>
<span class="k">@implementation</span> <span class="nc">SchemaThree</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nf">createProductWithType</span><span class="p">:(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">IntelCPU</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithPins</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[[</span><span class="n">GAMainBoard</span> <span class="nf">alloc</span><span class="p">]</span><span class="nf">initWithCpuHoles</span><span class="p">:</span><span class="mi">1386</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[</span><span class="n">HyMemory</span> <span class="nf">new</span><span class="p">];</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 装机工程师的实现
</span><span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">:</span> <span class="nc">NSObject</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">ComputerEngineer</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span> <span class="n">cpu</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span> <span class="n">mainBoard</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">ComputerEngineer</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeComputerWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	<span class="c1">// 准备硬件
</span>	<span class="p">[</span><span class="n">self</span> <span class="nf">prepareHardwaresWithSchema</span><span class="p">:</span><span class="n">schema</span><span class="p">];</span>
	<span class="c1">// 组装机器
</span>	<span class="c1">// 测试机器
</span><span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareHardwaresWithSchema</span><span class="p">:(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">AbstractFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">schema</span> <span class="p">{</span>
	
	<span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">CPUApi</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">schema</span> <span class="nf">createProductWithType</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
	<span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="o">=</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MainBoardApi</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">schema</span> <span class="nf">createProductWithType</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
	<span class="n">self</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="p">(</span><span class="n">id</span><span class="o">&lt;</span><span class="n">MemoryApi</span><span class="o">&gt;</span><span class="p">)[</span><span class="n">schema</span> <span class="nf">createProductWithType</span><span class="p">:</span><span class="mi">3</span><span class="p">];</span>

	<span class="c1">// 测试是否好用
</span>	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cpu</span> <span class="nf">calculate</span><span class="p">];</span>
	<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mainBoard</span> <span class="nf">installCPU</span><span class="p">];</span>
	<span class="c1">// 这里需要加判断，如果不加判断，使用SchemaOne和SchemaTwo时会Crash
</span>	<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">)</span> <span class="p">{</span>
		<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">memory</span> <span class="nf">cacheData</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">@end</span>

<span class="c1">// 测试
</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
	<span class="n">ComputerEngineer</span> <span class="o">*</span><span class="n">engineer</span> <span class="o">=</span> <span class="p">[</span><span class="n">ComputerEngineer</span> <span class="nf">new</span><span class="p">];</span>
	<span class="c1">// 这里直接使用SchemaThree就好了
</span>	<span class="p">[</span><span class="n">engineer</span> <span class="nf">makeComputerWithSchema</span><span class="p">:[</span><span class="n">SchemaThree</span> <span class="nf">new</span><span class="p">]];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这种方式比较灵活，当然也不太安全，是否使用要看设计上的权衡了。</p>
<h3 id="思考抽象工厂模式">思考抽象工厂模式</h3>
<p>抽象工厂模式的本质是<em>选择产品簇的实现</em>，工厂方法是选择单个产品实现，虽然一个类里面可以有多个工厂方法，但是这些方法之间一般没有联系，即使看起来像有联系。但是抽象工厂着重的就是为一个产品簇选择实现，定义在抽象工厂里面的方法通常是有联系的，他们都是产品的某一个部分或者是相互依赖的。如果在抽象工厂里面只定义一个方法，直接创建产品，那么就退化成工厂方法了。如果把工厂类退化一下，只提供工厂方法，并且提供默认实现就退化成简单工厂了。</p>
<h2 id="总结">总结</h2>
<p>简单工厂：选择实现，减少不必要的依赖，方便代码复用。
工厂方法：父类定框架，子类做实现，把选择实现延迟到子类，符合开闭原则，依赖倒置原则。
抽象工厂：创建产品簇，简化业务逻辑。</p>

	  ]]></description>
	</item>


</channel>
</rss>
